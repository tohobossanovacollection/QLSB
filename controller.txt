//BookingController
package controller;

import java.time.LocalDateTime;
import java.util.List;
import model.Booking;
import model.Customer;
import model.Pitch;
import service.BookingService;
import view.BookingView;

public class BookingController {
    private BookingService bookingService;
    private BookingView bookingView;
    
    public BookingController(BookingService bookingService, BookingView bookingView) {
        this.bookingService = bookingService;
        this.bookingView = bookingView;
    }
    
    public void processNewBooking() {
        // Get booking info from view
        Booking bookingData = bookingView.getBookingData();
        
        try {
            // Validate and save booking
            boolean isAvailable = bookingService.checkAvailability(
                bookingData.getPitch(), 
                bookingData.getStartTime(), 
                bookingData.getEndTime()
            );
            
            if (isAvailable) {
                Booking savedBooking = bookingService.createBooking(bookingData);
                bookingView.displayBookingSuccess(savedBooking);
            } else {
                bookingView.displayBookingUnavailable();
            }
        } catch (Exception e) {
            bookingView.displayError("Error processing booking: " + e.getMessage());
        }
    }
    
    public void displayAllBookings() {
        try {
            List<Booking> bookings = bookingService.getAllBookings();
            bookingView.displayBookingList(bookings);
        } catch (Exception e) {
            bookingView.displayError("Error retrieving bookings: " + e.getMessage());
        }
    }
    
    public void searchBookingsByDate(LocalDateTime date) {
        try {
            List<Booking> bookings = bookingService.getBookingsByDate(date);
            bookingView.displayBookingList(bookings);
        } catch (Exception e) {
            bookingView.displayError("Error searching bookings: " + e.getMessage());
        }
    }
    
    public void searchBookingsByCustomer(Customer customer) {
        try {
            List<Booking> bookings = bookingService.getBookingsByCustomer(customer);
            bookingView.displayBookingList(bookings);
        } catch (Exception e) {
            bookingView.displayError("Error searching bookings: " + e.getMessage());
        }
    }
    
    public void cancelBooking() {
        int bookingId = bookingView.getBookingIdForCancellation();
        
        try {
            boolean canceled = bookingService.cancelBooking(bookingId);
            if (canceled) {
                bookingView.displayCancellationSuccess();
            } else {
                bookingView.displayError("Booking could not be canceled");
            }
        } catch (Exception e) {
            bookingView.displayError("Error canceling booking: " + e.getMessage());
        }
    }
}

//PitchController 
package controller;

import java.util.List;
import model.Pitch;
import service.PitchService;
import view.PitchView;

public class PitchController {
    private PitchService pitchService;
    private PitchView pitchView;
    
    public PitchController(PitchService pitchService, PitchView pitchView) {
        this.pitchService = pitchService;
        this.pitchView = pitchView;
    }
    
    public void displayAllPitches() {
        try {
            List<Pitch> pitches = pitchService.getAllPitches();
            pitchView.displayPitchList(pitches);
        } catch (Exception e) {
            pitchView.displayError("Error retrieving pitches: " + e.getMessage());
        }
    }
    
    public void processNewPitch() {
        Pitch pitchData = pitchView.getPitchData();
        
        try {
            Pitch savedPitch = pitchService.createPitch(pitchData);
            pitchView.displayPitchCreationSuccess(savedPitch);
        } catch (Exception e) {
            pitchView.displayError("Error creating pitch: " + e.getMessage());
        }
    }
    
    public void updatePitch() {
        int pitchId = pitchView.getPitchIdForUpdate();
        
        try {
            Pitch existingPitch = pitchService.getPitchById(pitchId);
            if (existingPitch != null) {
                Pitch updatedData = pitchView.getUpdatedPitchData(existingPitch);
                Pitch updatedPitch = pitchService.updatePitch(updatedData);
                pitchView.displayPitchUpdateSuccess(updatedPitch);
            } else {
                pitchView.displayError("Pitch not found");
            }
        } catch (Exception e) {
            pitchView.displayError("Error updating pitch: " + e.getMessage());
        }
    }
    
    public void deletePitch() {
        int pitchId = pitchView.getPitchIdForDeletion();
        
        try {
            boolean deleted = pitchService.deletePitch(pitchId);
            if (deleted) {
                pitchView.displayPitchDeletionSuccess();
            } else {
                pitchView.displayError("Pitch could not be deleted");
            }
        } catch (Exception e) {
            pitchView.displayError("Error deleting pitch: " + e.getMessage());
        }
    }
    
    public void displayAvailablePitches() {
        try {
            List<Pitch> availablePitches = pitchService.getAvailablePitches();
            pitchView.displayPitchList(availablePitches);
        } catch (Exception e) {
            pitchView.displayError("Error retrieving available pitches: " + e.getMessage());
        }
    }
}

//CustomerController 
package controller;

import java.util.List;
import model.Customer;
import service.CustomerService;
import view.CustomerView;

public class CustomerController {
    private CustomerService customerService;
    private CustomerView customerView;
    
    public CustomerController(CustomerService customerService, CustomerView customerView) {
        this.customerService = customerService;
        this.customerView = customerView;
    }
    
    public void displayAllCustomers() {
        try {
            List<Customer> customers = customerService.getAllCustomers();
            customerView.displayCustomerList(customers);
        } catch (Exception e) {
            customerView.displayError("Error retrieving customers: " + e.getMessage());
        }
    }
    
    public void processNewCustomer() {
        Customer customerData = customerView.getCustomerData();
        
        try {
            Customer savedCustomer = customerService.createCustomer(customerData);
            customerView.displayCustomerCreationSuccess(savedCustomer);
        } catch (Exception e) {
            customerView.displayError("Error creating customer: " + e.getMessage());
        }
    }
    
    public void updateCustomer() {
        int customerId = customerView.getCustomerIdForUpdate();
        
        try {
            Customer existingCustomer = customerService.getCustomerById(customerId);
            if (existingCustomer != null) {
                Customer updatedData = customerView.getUpdatedCustomerData(existingCustomer);
                Customer updatedCustomer = customerService.updateCustomer(updatedData);
                customerView.displayCustomerUpdateSuccess(updatedCustomer);
            } else {
                customerView.displayError("Customer not found");
            }
        } catch (Exception e) {
            customerView.displayError("Error updating customer: " + e.getMessage());
        }
    }
    
    public void searchCustomerByPhone() {
        String phone = customerView.getPhoneForSearch();
        
        try {
            Customer customer = customerService.findCustomerByPhone(phone);
            if (customer != null) {
                customerView.displayCustomerDetails(customer);
            } else {
                customerView.displayCustomerNotFound();
            }
        } catch (Exception e) {
            customerView.displayError("Error searching customer: " + e.getMessage());
        }
    }
    
    public Customer selectCustomer() {
        try {
            List<Customer> customers = customerService.getAllCustomers();
            return customerView.selectCustomer(customers);
        } catch (Exception e) {
            customerView.displayError("Error retrieving customers: " + e.getMessage());
            return null;
        }
    }
}

//MainController 
