package view;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Scanner;
import utils.DateTimeUtils;

public class MainView {
    private Scanner scanner;
    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
    
    public MainView() {
        scanner = new Scanner(System.in);
    }
    
    public String getUsername() {
        System.out.print("Username: ");
        return scanner.nextLine();
    }
    
    public String getPassword() {
        System.out.print("Password: ");
        return scanner.nextLine();
    }
    
    public void displayMessage(String message) {
        System.out.println("=== " + message + " ===");
    }
    
    public int displayMainMenu() {
        System.out.println("\n===== FOOTBALL PITCH MANAGEMENT SYSTEM =====");
        System.out.println("1. Pitch Management");
        System.out.println("2. Booking Management");
        System.out.println("3. Customer Management");
        System.out.println("0. Exit");
        System.out.print("Please select an option: ");
        
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // Invalid input
        }
    }
    
    public int displayPitchMenu() {
        System.out.println("\n===== PITCH MANAGEMENT =====");
        System.out.println("1. View All Pitches");
        System.out.println("2. Add New Pitch");
        System.out.println("3. Update Pitch");
        System.out.println("4. Delete Pitch");
        System.out.println("5. View Available Pitches");
        System.out.println("0. Return to Main Menu");
        System.out.print("Please select an option: ");
        
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // Invalid input
        }
    }
    
    public int displayBookingMenu() {
        System.out.println("\n===== BOOKING MANAGEMENT =====");
        System.out.println("1. Create New Booking");
        System.out.println("2. View All Bookings");
        System.out.println("3. Search Bookings by Date");
        System.out.println("4. Search Bookings by Customer");
        System.out.println("5. Cancel Booking");
        System.out.println("0. Return to Main Menu");
        System.out.print("Please select an option: ");
        
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // Invalid input
        }
    }
    
    public int displayCustomerMenu() {
        System.out.println("\n===== CUSTOMER MANAGEMENT =====");
        System.out.println("1. View All Customers");
        System.out.println("2. Add New Customer");
        System.out.println("3. Update Customer");
        System.out.println("4. Search Customer by Phone");
        System.out.println("0. Return to Main Menu");
        System.out.print("Please select an option: ");
        
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // Invalid input
        }
    }
    
    public LocalDateTime getDateForSearch() {
        LocalDateTime date = null;
        boolean validInput = false;
        
        while (!validInput) {
            System.out.print("Enter date (dd/MM/yyyy HH:mm): ");
            String dateStr = scanner.nextLine();
            
            try {
                date = LocalDateTime.parse(dateStr, dateFormatter);
                validInput = true;
            } catch (DateTimeParseException e) {
                System.out.println("Invalid date format. Please use format: dd/MM/yyyy HH:mm");
            }
        }
        
        return date;
    }
    
    public void close() {
        if (scanner != null) {
            scanner.close();
        }
    }
}

//Bookingview
package view;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Scanner;
import model.Booking;
import model.Customer;
import model.Pitch;
import service.CustomerService;
import service.PitchService;

public class BookingView {
    private Scanner scanner;
    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
    private PitchService pitchService;
    private CustomerService customerService;
    
    public BookingView(PitchService pitchService, CustomerService customerService) {
        this.scanner = new Scanner(System.in);
        this.pitchService = pitchService;
        this.customerService = customerService;
    }
    
    public Booking getBookingData() {
        Booking booking = new Booking();
        
        // Select Pitch
        List<Pitch> pitches = pitchService.getAllPitches();
        System.out.println("\n===== AVAILABLE PITCHES =====");
        for (int i = 0; i < pitches.size(); i++) {
            Pitch pitch = pitches.get(i);
            System.out.println((i + 1) + ". " + pitch.getName() + " - " + pitch.getType() + " - " + pitch.getPricePerHour() + "/hour");
        }
        
        int pitchChoice = -1;
        while (pitchChoice < 0 || pitchChoice >= pitches.size()) {
            System.out.print("Select pitch (1-" + pitches.size() + "): ");
            try {
                pitchChoice = Integer.parseInt(scanner.nextLine()) - 1;
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
            }
        }
        booking.setPitch(pitches.get(pitchChoice));
        
        // Select Customer
        List<Customer> customers = customerService.getAllCustomers();
        System.out.println("\n===== CUSTOMERS =====");
        for (int i = 0; i < customers.size(); i++) {
            Customer customer = customers.get(i);
            System.out.println((i + 1) + ". " + customer.getName() + " - " + customer.getPhone());
        }
        System.out.println((customers.size() + 1) + ". Create new customer");
        
        int customerChoice = -1;
        while (customerChoice < 0 || customerChoice > customers.size()) {
            System.out.print("Select customer (1-" + (customers.size() + 1) + "): ");
            try {
                customerChoice = Integer.parseInt(scanner.nextLine()) - 1;
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
            }
        }
        
        // If last option, create new customer
        if (customerChoice == customers.size()) {
            CustomerView customerView = new CustomerView();
            Customer newCustomer = customerView.getCustomerData();
            newCustomer = customerService.createCustomer(newCustomer);
            booking.setCustomer(newCustomer);
        } else {
            booking.setCustomer(customers.get(customerChoice));
        }
        
        // Set booking time
        boolean validStartTime = false;
        while (!validStartTime) {
            System.out.print("Enter start time (dd/MM/yyyy HH:mm): ");
            String startTimeStr = scanner.nextLine();
            
            try {
                LocalDateTime startTime = LocalDateTime.parse(startTimeStr, dateFormatter);
                booking.setStartTime(startTime);
                validStartTime = true;
            } catch (DateTimeParseException e) {
                System.out.println("Invalid date format. Please use format: dd/MM/yyyy HH:mm");
            }
        }
        
        boolean validEndTime = false;
        while (!validEndTime) {
            System.out.print("Enter end time (dd/MM/yyyy HH:mm): ");
            String endTimeStr = scanner.nextLine();
            
            try {
                LocalDateTime endTime = LocalDateTime.parse(endTimeStr, dateFormatter);
                
                if (endTime.isAfter(booking.getStartTime())) {
                    booking.setEndTime(endTime);
                    validEndTime = true;
                } else {
                    System.out.println("End time must be after start time.");
                }
            } catch (DateTimeParseException e) {
                System.out.println("Invalid date format. Please use format: dd/MM/yyyy HH:mm");
            }
        }
        
        // Set status
        booking.setStatus("CONFIRMED");
        
        return booking;
    }
    
    public void displayBookingSuccess(Booking booking) {
        System.out.println("\n===== BOOKING CREATED SUCCESSFULLY =====");
        System.out.println("Booking ID: " + booking.getId());
        System.out.println("Pitch: " + booking.getPitch().getName());
        System.out.println("Customer: " + booking.getCustomer().getName() + " (" + booking.getCustomer().getPhone() + ")");
        System.out.println("Start Time: " + booking.getStartTime().format(dateFormatter));
        System.out.println("End Time: " + booking.getEndTime().format(dateFormatter));
        System.out.println("Status: " + booking.getStatus());
    }
    
    public void displayBookingUnavailable() {
        System.out.println("\nERROR: The selected pitch is not available for the specified time period.");
    }
    
    public void displayError(String errorMessage) {
        System.out.println("\nERROR: " + errorMessage);
    }
    
    public void displayBookingList(List<Booking> bookings) {
        if (bookings.isEmpty()) {
            System.out.println("\nNo bookings found.");
            return;
        }
        
        System.out.println("\n===== BOOKING LIST =====");
        System.out.printf("%-5s | %-15s | %-20s | %-20s | %-20s | %-10s\n", 
                "ID", "Pitch", "Customer", "Start Time", "End Time", "Status");
        System.out.println("---------------------------------------------------------------------------------------------------------------");
        
        for (Booking booking : bookings) {
            System.out.printf("%-5d | %-15s | %-20s | %-20s | %-20s | %-10s\n",
                    booking.getId(),
                    booking.getPitch().getName(),
                    booking.getCustomer().getName(),
                    booking.getStartTime().format(dateFormatter),
                    booking.getEndTime().format(dateFormatter),
                    booking.getStatus());
        }
    }
    
    public int getBookingIdForCancellation() {
        System.out.print("Enter booking ID to cancel: ");
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            System.out.println("Invalid ID format. Please enter a number.");
            return getBookingIdForCancellation();
        }
    }
    
    public void displayCancellationSuccess() {
        System.out.println("\nBooking has been successfully canceled.");
    }
}


//mainview 
package view;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Scanner;
import utils.DateTimeUtils; // Removed as the class is not found

public class MainView {
    private Scanner scanner;
    private DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
    
    public MainView() {
        scanner = new Scanner(System.in);
    }
    
    public String getUsername() {
        System.out.print("Username: ");
        return scanner.nextLine();
    }
    
    public String getPassword() {
        System.out.print("Password: ");
        return scanner.nextLine();
    }
    
    public void displayMessage(String message) {
        System.out.println("=== " + message + " ===");
    }
    
    public int displayMainMenu() {
        System.out.println("\n===== FOOTBALL PITCH MANAGEMENT SYSTEM =====");
        System.out.println("1. Pitch Management");
        System.out.println("2. Booking Management");
        System.out.println("3. Customer Management");
        System.out.println("0. Exit");
        System.out.print("Please select an option: ");
        
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // Invalid input
        }
    }
    
    public int displayPitchMenu() {
        System.out.println("\n===== PITCH MANAGEMENT =====");
        System.out.println("1. View All Pitches");
        System.out.println("2. Add New Pitch");
        System.out.println("3. Update Pitch");
        System.out.println("4. Delete Pitch");
        System.out.println("5. View Available Pitches");
        System.out.println("0. Return to Main Menu");
        System.out.print("Please select an option: ");
        
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // Invalid input
        }
    }
    
    public int displayBookingMenu() {
        System.out.println("\n===== BOOKING MANAGEMENT =====");
        System.out.println("1. Create New Booking");
        System.out.println("2. View All Bookings");
        System.out.println("3. Search Bookings by Date");
        System.out.println("4. Search Bookings by Customer");
        System.out.println("5. Cancel Booking");
        System.out.println("0. Return to Main Menu");
        System.out.print("Please select an option: ");
        
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // Invalid input
        }
    }
    
    public int displayCustomerMenu() {
        System.out.println("\n===== CUSTOMER MANAGEMENT =====");
        System.out.println("1. View All Customers");
        System.out.println("2. Add New Customer");
        System.out.println("3. Update Customer");
        System.out.println("4. Search Customer by Phone");
        System.out.println("0. Return to Main Menu");
        System.out.print("Please select an option: ");
        
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // Invalid input
        }
    }
    
    public LocalDateTime getDateForSearch() {
        LocalDateTime date = null;
        boolean validInput = false;
        
        while (!validInput) {
            System.out.print("Enter date (dd/MM/yyyy HH:mm): ");
            String dateStr = scanner.nextLine();
            
            try {
                date = LocalDateTime.parse(dateStr, dateFormatter);
                validInput = true;
            } catch (DateTimeParseException e) {
                System.out.println("Invalid date format. Please use format: dd/MM/yyyy HH:mm");
            }
        }
        
        return date;
    }
    
    public void close() {
        if (scanner != null) {
            scanner.close();
        }
    }
}

//CustomerView
package view;

import java.util.List;
import java.util.Scanner;
import model.Customer;

public class CustomerView {
    private Scanner scanner;
    
    public CustomerView() {
        this.scanner = new Scanner(System.in);
    }
    
    public Customer getCustomerData() {
        Customer customer = new Customer();
        
        System.out.println("\n===== ADD NEW CUSTOMER =====");
        
        System.out.print("Enter customer name: ");
        customer.setName(scanner.nextLine());
        
        System.out.print("Enter phone number: ");
        customer.setPhone(scanner.nextLine());
        
        System.out.print("Enter email (optional): ");
        String email = scanner.nextLine();
        if (!email.isEmpty()) {
            customer.setEmail(email);
        }
        
        System.out.println("Customer type:");
        System.out.println("1. Regular");
        System.out.println("2. VIP");
        System.out.println("3. Corporate");
        
        int typeChoice = 0;
        while (typeChoice < 1 || typeChoice > 3) {
            System.out.print("Select customer type (1-3): ");
            try {
                typeChoice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
            }
        }
        
        switch (typeChoice) {
            case 1:
                customer.setCustomerType("REGULAR");
                break;
            case 2:
                customer.setCustomerType("VIP");
                break;
            case 3:
                customer.setCustomerType("CORPORATE");
                break;
        }
        
        System.out.print("Enter notes (optional): ");
        String notes = scanner.nextLine();
        if (!notes.isEmpty()) {
            customer.setNotes(notes);
        }
        
        return customer;
    }
    
    public void displayCustomerList(List<Customer> customers) {
        if (customers.isEmpty()) {
            System.out.println("\nNo customers found.");
            return;
        }
        
        System.out.println("\n===== CUSTOMER LIST =====");
        System.out.printf("%-5s | %-20s | %-15s | %-25s | %-10s\n", 
                "ID", "Name", "Phone", "Email", "Type");
        System.out.println("---------------------------------------------------------------------------------");
        
        for (Customer customer : customers) {
            System.out.printf("%-5d | %-20s | %-15s | %-25s | %-10s\n",
                    customer.getId(),
                    customer.getName(),
                    customer.getPhone(),
                    customer.getEmail() != null ? customer.getEmail() : "",
                    customer.getCustomerType());
        }
    }
    
    public void displayCustomerDetails(Customer customer) {
        System.out.println("\n===== CUSTOMER DETAILS =====");
        System.out.println("ID: " + customer.getId());
        System.out.println("Name: " + customer.getName());
        System.out.println("Phone: " + customer.getPhone());
        System.out.println("Email: " + (customer.getEmail() != null ? customer.getEmail() : "N/A"));
        System.out.println("Type: " + customer.getCustomerType());
        System.out.println("Notes: " + (customer.getNotes() != null ? customer.getNotes() : "N/A"));
    }
    
    public void displayCustomerCreationSuccess(Customer customer) {
        System.out.println("\n===== CUSTOMER CREATED SUCCESSFULLY =====");
        System.out.println("ID: " + customer.getId());
        System.out.println("Name: " + customer.getName());
        System.out.println("Phone: " + customer.getPhone());
    }
    
    public int getCustomerIdForUpdate() {
        System.out.print("Enter customer ID to update: ");
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            System.out.println("Invalid ID format. Please enter a number.");
            return getCustomerIdForUpdate();
        }
    }
    
    public Customer getUpdatedCustomerData(Customer existingCustomer) {
        System.out.println("\n===== UPDATE CUSTOMER =====");
        System.out.println("(Press Enter to keep current values)");
        
        System.out.print("Enter customer name [" + existingCustomer.getName() + "]: ");
        String name = scanner.nextLine();
        if (!name.isEmpty()) {
            existingCustomer.setName(name);
        }
        
        System.out.print("Enter phone number [" + existingCustomer.getPhone() + "]: ");
        String phone = scanner.nextLine();
        if (!phone.isEmpty()) {
            existingCustomer.setPhone(phone);
        }
        
        System.out.print("Enter email [" + (existingCustomer.getEmail() != null ? existingCustomer.getEmail() : "") + "]: ");
        String email = scanner.nextLine();
        if (!email.isEmpty()) {
            existingCustomer.setEmail(email);
        }
        
        System.out.println("Customer type:");
        System.out.println("1. Regular");
        System.out.println("2. VIP");
        System.out.println("3. Corporate");
        System.out.println("Current type: " + existingCustomer.getCustomerType());
        
        System.out.print("Select customer type (1-3) or press Enter to keep current: ");
        String typeChoice = scanner.nextLine();
        if (!typeChoice.isEmpty()) {
            try {
                int choice = Integer.parseInt(typeChoice);
                if (choice >= 1 && choice <= 3) {
                    switch (choice) {
                        case 1:
                            existingCustomer.setCustomerType("REGULAR");
                            break;
                        case 2:
                            existingCustomer.setCustomerType("VIP");
                            break;
                        case 3:
                            existingCustomer.setCustomerType("CORPORATE");
                            break;
                    }
                }
            } catch (NumberFormatException e) {
                // If invalid, keep current value
            }
        }
        
        System.out.print("Enter notes [" + (existingCustomer.getNotes() != null ? existingCustomer.getNotes() : "") + "]: ");
        String notes = scanner.nextLine();
        if (!notes.isEmpty()) {
            existingCustomer.setNotes(notes);
        }
        
        return existingCustomer;
    }
    
    public void displayCustomerUpdateSuccess(Customer customer) {
        System.out.println("\n===== CUSTOMER UPDATED SUCCESSFULLY =====");
        System.out.println("ID: " + customer.getId());
        System.out.println("Name: " + customer.getName());
        System.out.println("Phone: " + customer.getPhone());
        System.out.println("Type: " + customer.getCustomerType());
    }
    
    public String getPhoneForSearch() {
        System.out.print("Enter phone number to search: ");
        return scanner.nextLine();
    }
    
    public void displayCustomerNotFound() {
        System.out.println("\nNo customer found with the given phone number.");
    }
    
    public Customer selectCustomer(List<Customer> customers) {
        if (customers.isEmpty()) {
            System.out.println("\nNo customers available.");
            return null;
        }
        
        displayCustomerList(customers);
        
        int customerChoice = -1;
        while (customerChoice < 0 || customerChoice >= customers.size()) {
            System.out.print("Select customer ID: ");
            try {
                customerChoice = Integer.parseInt(scanner.nextLine());
                
                // Find customer with matching ID
                for (Customer customer : customers) {
                    if (customer.getId() == customerChoice) {
                        return customer;
                    }
                }
                
                System.out.println("Invalid customer ID. Please try again.");
                customerChoice = -1;
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
            }
        }
        
        return null;
    }
    
    public void displayError(String errorMessage) {
        System.out.println("\nERROR: " + errorMessage);
    }
}

//utils.DateTimeUtils
package utils;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class DateTimeUtils {
    private static final DateTimeFormatter DEFAULT_FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
    
    /**
     * Format LocalDateTime to string using default format
     */
    public static String formatDateTime(LocalDateTime dateTime) {
        if (dateTime == null) return "";
        return dateTime.format(DEFAULT_FORMATTER);
    }
    
    /**
     * Parse string to LocalDateTime using default format
     */
    public static LocalDateTime parseDateTime(String dateTimeStr) throws DateTimeParseException {
        if (dateTimeStr == null || dateTimeStr.trim().isEmpty()) return null;
        return LocalDateTime.parse(dateTimeStr, DEFAULT_FORMATTER);
    }
    
    /**
     * Check if two time ranges overlap
     */
    public static boolean timeRangesOverlap(
            LocalDateTime start1, LocalDateTime end1,
            LocalDateTime start2, LocalDateTime end2) {
        
        return (start1.isBefore(end2) && start2.isBefore(end1));
    }
    
    /**
     * Calculate duration in hours between two times
     */
    public static double calculateHoursBetween(LocalDateTime start, LocalDateTime end) {
        if (start == null || end == null) return 0;
        
        // Calculate duration in seconds then convert to hours
        long seconds = java.time.Duration.between(start, end).getSeconds();
        return seconds / 3600.0;
    }
}

//FootballPitchApp 
package app;

import controller.BookingController;
import controller.CustomerController;
import controller.MainController;
import controller.PitchController;
import dao.BookingDAO;
import dao.CustomerDAO;
import dao.PitchDAO;
import dao.UserDAO;
import service.BookingService;
import service.CustomerService;
import service.PitchService;
import service.UserService;
import view.BookingView;
import view.CustomerView;
import view.MainView;
import view.PitchView;

public class FootballPitchApp {
    public static void main(String[] args) {
        // Initialize DAOs
        PitchDAO pitchDAO = new PitchDAO();
        BookingDAO bookingDAO = new BookingDAO();
        CustomerDAO customerDAO = new CustomerDAO();
        UserDAO userDAO = new UserDAO();
        
        // Initialize Services
        PitchService pitchService = new PitchService(pitchDAO);
        CustomerService customerService = new CustomerService(customerDAO);
        BookingService bookingService = new BookingService(bookingDAO, pitchService);
        UserService userService = new UserService(userDAO);
        
        // Initialize Views
        MainView mainView = new MainView();
        PitchView pitchView = new PitchView();
        CustomerView customerView = new CustomerView();
        BookingView bookingView = new BookingView(pitchService, customerService);
        
        // Initialize Controllers
        PitchController pitchController = new PitchController(pitchService, pitchView);
        CustomerController customerController = new CustomerController(customerService, customerView);
        BookingController bookingController = new BookingController(bookingService, bookingView);
        
        // Initialize Main Controller
        MainController mainController = new MainController(
                mainView, 
                userService, 
                bookingController, 
                pitchController, 
                customerController);
        
        // Start the application
        mainController.start();
        
        // Close resources
        mainView.close();
    }
}